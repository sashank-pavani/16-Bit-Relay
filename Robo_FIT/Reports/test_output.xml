<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.10.11 on win32)" generated="20241106 11:33:06.013" rpa="false" schemaversion="3">
<suite id="s1" name="ProjectTests" source="C:\TOYOTA_DAILY_SANITY\CRE\SWE5_SWIntegrationTest\ProjectTests">
<kw name="Establish Test Preconditions" type="SETUP">
<kw name="Xml Create Root" library="UserXmlReporting">
<status status="PASS" starttime="20241106 11:33:07.147" endtime="20241106 11:33:07.147"/>
</kw>
<status status="PASS" starttime="20241106 11:33:07.146" endtime="20241106 11:33:07.147"/>
</kw>
<suite id="s1-s1" name="Lauterbach" source="C:\TOYOTA_DAILY_SANITY\CRE\SWE5_SWIntegrationTest\ProjectTests\Lauterbach">
<suite id="s1-s1-s1" name="Trac32" source="C:\TOYOTA_DAILY_SANITY\CRE\SWE5_SWIntegrationTest\ProjectTests\Lauterbach\Trac32.robot">
<test id="s1-s1-s1-t1" name="TCTOIC-30368 :ToyotaFDC-Verify copy the latest binaries from the daily build" line="55">
<kw name="Ssh Connect Copy Server Build Binfiles" library="AutoDL">
<status status="PASS" starttime="20241106 11:33:13.317" endtime="20241106 11:33:22.794"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>15s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241106 11:33:37.796" level="INFO">Slept 15 seconds</msg>
<status status="PASS" starttime="20241106 11:33:22.795" endtime="20241106 11:33:37.796"/>
</kw>
<doc>Copy the binaries from Jenkins</doc>
<tag>flash</tag>
<tag>Manual1</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20241106 11:33:13.316" endtime="20241106 11:33:37.796"/>
</test>
<test id="s1-s1-s1-t2" name="TCTOIC-30369 :ToyotaFDC-Verify automation test case of Run the of Miniprogm test case ToyotaFDC_VIP_Mini" line="61">
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<kw name="Relay Connect" library="VAutoKitClass">
<var>${relay}</var>
<arg>${switch}</arg>
<doc>This method is used to connect relay
param relay: Relay name from Robot script provided by user for to connect relay</doc>
<msg timestamp="20241106 11:33:45.820" level="INFO">[0;32m06-11-2024 11:33:37:797793	class=VAutoKitClass.py	function=relay_connect	line: 140	INFO	idx relay value- 0
[0m</msg>
<msg timestamp="20241106 11:33:45.821" level="INFO">${relay} = False</msg>
<status status="PASS" starttime="20241106 11:33:37.797" endtime="20241106 11:33:45.821"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241106 11:33:46.824" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241106 11:33:45.822" endtime="20241106 11:33:46.824"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${relay}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241106 11:33:46.826" level="INFO">False</msg>
<status status="PASS" starttime="20241106 11:33:46.825" endtime="20241106 11:33:46.826"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${relay}</arg>
<doc>Fails if the given condition is not true.</doc>
<msg timestamp="20241106 11:33:46.827" level="FAIL">'False' should be true.</msg>
<status status="FAIL" starttime="20241106 11:33:46.827" endtime="20241106 11:33:46.828"/>
</kw>
<status status="FAIL" starttime="20241106 11:33:37.797" endtime="20241106 11:33:46.828"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:33:46.829" endtime="20241106 11:33:46.829"/>
</kw>
<kw name="VIP Flashing" library="Lauterbach">
<var>${status}</var>
<doc>Load dfu nor file into through command prompt and flash.</doc>
<status status="NOT RUN" starttime="20241106 11:33:46.829" endtime="20241106 11:33:46.829"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${status}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:33:46.829" endtime="20241106 11:33:46.829"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>90</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:33:46.830" endtime="20241106 11:33:46.830"/>
</kw>
<kw name="Check Success Messages Vip" library="Lauterbach">
<var>${status}</var>
<status status="NOT RUN" starttime="20241106 11:33:46.830" endtime="20241106 11:33:46.830"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:33:46.830" endtime="20241106 11:33:46.830"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${status}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:33:46.830" endtime="20241106 11:33:46.830"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:33:46.830" endtime="20241106 11:33:46.830"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:33:46.830" endtime="20241106 11:33:46.830"/>
</kw>
<doc>Flash the VIP binaries miniprog4</doc>
<tag>flash</tag>
<tag>Manual</tag>
<tag>sanity</tag>
<status status="FAIL" starttime="20241106 11:33:37.797" endtime="20241106 11:33:46.831">'False' should be true.</status>
</test>
<test id="s1-s1-s1-t3" name="TCTOIC-30370 :ToyotaFDC-Verify unzip the UART and DFU file" line="76">
<kw name="Unzip Dfu Package" library="Lauterbach">
<var>${status}</var>
<doc>Load dfu nor file into through command prompt and flash.</doc>
<msg timestamp="20241106 11:33:52.083" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20241106 11:33:46.831" endtime="20241106 11:33:52.083"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${status}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20241106 11:33:52.084" endtime="20241106 11:33:52.084"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241106 11:34:02.089" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20241106 11:33:52.084" endtime="20241106 11:34:02.089"/>
</kw>
<kw name="Unzip UART Package" library="Lauterbach">
<var>${status}</var>
<doc>Load dfu nor file into through command prompt and flash.</doc>
<msg timestamp="20241106 11:34:02.124" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20241106 11:34:02.089" endtime="20241106 11:34:02.124"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${status}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20241106 11:34:02.124" endtime="20241106 11:34:02.124"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241106 11:34:12.132" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20241106 11:34:02.124" endtime="20241106 11:34:12.132"/>
</kw>
<doc>To unzip the DFU and UART package file</doc>
<tag>flash</tag>
<tag>Manual</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20241106 11:33:46.831" endtime="20241106 11:34:12.133"/>
</test>
<test id="s1-s1-s1-t4" name="TCTOIC-30371 :ToyotaFDC-Verify flash the DFU File" line="86">
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<kw name="Relay Connect" library="VAutoKitClass">
<var>${relay}</var>
<arg>${switch}</arg>
<doc>This method is used to connect relay
param relay: Relay name from Robot script provided by user for to connect relay</doc>
<msg timestamp="20241106 11:34:20.156" level="INFO">[0;32m06-11-2024 11:34:12:138282	class=VAutoKitClass.py	function=relay_connect	line: 140	INFO	idx relay value- 0
[0m</msg>
<msg timestamp="20241106 11:34:20.156" level="INFO">${relay} = False</msg>
<status status="PASS" starttime="20241106 11:34:12.138" endtime="20241106 11:34:20.156"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241106 11:34:21.157" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241106 11:34:20.156" endtime="20241106 11:34:21.158"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${relay}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241106 11:34:21.160" level="INFO">False</msg>
<status status="PASS" starttime="20241106 11:34:21.159" endtime="20241106 11:34:21.160"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${relay}</arg>
<doc>Fails if the given condition is not true.</doc>
<msg timestamp="20241106 11:34:21.161" level="FAIL">'False' should be true.</msg>
<status status="FAIL" starttime="20241106 11:34:21.161" endtime="20241106 11:34:21.162"/>
</kw>
<status status="FAIL" starttime="20241106 11:34:12.137" endtime="20241106 11:34:21.162"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.163" endtime="20241106 11:34:21.163"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.163" endtime="20241106 11:34:21.164"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.164" endtime="20241106 11:34:21.164"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>boot2</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.164" endtime="20241106 11:34:21.164"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.164" endtime="20241106 11:34:21.164"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.164" endtime="20241106 11:34:21.164"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.164" endtime="20241106 11:34:21.164"/>
</kw>
<kw name="Flash Dfu Emmc File" library="Lauterbach">
<var>${status}</var>
<doc>Load dfu nor file into through command prompt and flash.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.164" endtime="20241106 11:34:21.165"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>460</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.165" endtime="20241106 11:34:21.165"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${status}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.165" endtime="20241106 11:34:21.165"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.165" endtime="20241106 11:34:21.165"/>
</kw>
<kw name="Check Success Messages Dfu" library="Lauterbach">
<var>${status}</var>
<status status="NOT RUN" starttime="20241106 11:34:21.165" endtime="20241106 11:34:21.165"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.166" endtime="20241106 11:34:21.166"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${status}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.166" endtime="20241106 11:34:21.166"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.166" endtime="20241106 11:34:21.166"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.166" endtime="20241106 11:34:21.166"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>boot2</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.166" endtime="20241106 11:34:21.166"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:21.166" endtime="20241106 11:34:21.166"/>
</kw>
<doc>flash the DFU file using the command</doc>
<tag>flash</tag>
<tag>Manual</tag>
<tag>sanity</tag>
<status status="FAIL" starttime="20241106 11:34:12.135" endtime="20241106 11:34:21.167">'False' should be true.</status>
</test>
<test id="s1-s1-s1-t5" name="TCTOIC-30372 :ToyotaFDC-Verify flash the UART File" line="110">
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<kw name="Relay Connect" library="VAutoKitClass">
<var>${relay}</var>
<arg>${switch}</arg>
<doc>This method is used to connect relay
param relay: Relay name from Robot script provided by user for to connect relay</doc>
<msg timestamp="20241106 11:34:29.189" level="INFO">[0;32m06-11-2024 11:34:21:168405	class=VAutoKitClass.py	function=relay_connect	line: 140	INFO	idx relay value- 0
[0m</msg>
<msg timestamp="20241106 11:34:29.190" level="INFO">${relay} = False</msg>
<status status="PASS" starttime="20241106 11:34:21.168" endtime="20241106 11:34:29.190"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241106 11:34:30.196" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241106 11:34:29.191" endtime="20241106 11:34:30.196"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${relay}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241106 11:34:30.197" level="INFO">False</msg>
<status status="PASS" starttime="20241106 11:34:30.196" endtime="20241106 11:34:30.197"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${relay}</arg>
<doc>Fails if the given condition is not true.</doc>
<msg timestamp="20241106 11:34:30.197" level="FAIL">'False' should be true.</msg>
<status status="FAIL" starttime="20241106 11:34:30.197" endtime="20241106 11:34:30.198"/>
</kw>
<status status="FAIL" starttime="20241106 11:34:21.167" endtime="20241106 11:34:30.198"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.198" endtime="20241106 11:34:30.198"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.198" endtime="20241106 11:34:30.199"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.199" endtime="20241106 11:34:30.199"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>boot1</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.199" endtime="20241106 11:34:30.199"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.199" endtime="20241106 11:34:30.200"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.200" endtime="20241106 11:34:30.200"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>20</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.200" endtime="20241106 11:34:30.201"/>
</kw>
<kw name="Flash Uart Nor File" library="Lauterbach">
<var>${status}</var>
<doc>Load dfu nor file into through command prompt and flash.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.201" endtime="20241106 11:34:30.201"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>280</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.201" endtime="20241106 11:34:30.201"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${status}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.202" endtime="20241106 11:34:30.202"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.202" endtime="20241106 11:34:30.202"/>
</kw>
<kw name="Check Success Messages Uart" library="Lauterbach">
<var>${status}</var>
<status status="NOT RUN" starttime="20241106 11:34:30.202" endtime="20241106 11:34:30.202"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.202" endtime="20241106 11:34:30.202"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${status}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.203" endtime="20241106 11:34:30.203"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.203" endtime="20241106 11:34:30.203"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.203" endtime="20241106 11:34:30.203"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>boot1</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.203" endtime="20241106 11:34:30.203"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.203" endtime="20241106 11:34:30.203"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.203" endtime="20241106 11:34:30.203"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:30.203" endtime="20241106 11:34:30.203"/>
</kw>
<doc>flash the UART file using the command</doc>
<tag>flash</tag>
<tag>Manual</tag>
<tag>sanity</tag>
<tag>uart</tag>
<status status="FAIL" starttime="20241106 11:34:21.167" endtime="20241106 11:34:30.204">'False' should be true.</status>
</test>
<test id="s1-s1-s1-t6" name="TCTOIC-30373 :ToyotaFDC-Verify Cluster screen up after flashing" line="135">
<kw name="Relayon" library="Common_proj_keywords">
<arg>boot2</arg>
<doc>This is a keyword for Relay ON.</doc>
<kw name="Relay Connect" library="VAutoKitClass">
<var>${relay}</var>
<arg>${switch}</arg>
<doc>This method is used to connect relay
param relay: Relay name from Robot script provided by user for to connect relay</doc>
<msg timestamp="20241106 11:34:38.229" level="INFO">[0;32m06-11-2024 11:34:30:204945	class=VAutoKitClass.py	function=relay_connect	line: 140	INFO	idx relay value- 3
[0m</msg>
<msg timestamp="20241106 11:34:38.230" level="INFO">${relay} = False</msg>
<status status="PASS" starttime="20241106 11:34:30.205" endtime="20241106 11:34:38.230"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20241106 11:34:39.233" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20241106 11:34:38.231" endtime="20241106 11:34:39.233"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${relay}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241106 11:34:39.235" level="INFO">False</msg>
<status status="PASS" starttime="20241106 11:34:39.234" endtime="20241106 11:34:39.235"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${relay}</arg>
<doc>Fails if the given condition is not true.</doc>
<msg timestamp="20241106 11:34:39.236" level="FAIL">'False' should be true.</msg>
<status status="FAIL" starttime="20241106 11:34:39.235" endtime="20241106 11:34:39.237"/>
</kw>
<status status="FAIL" starttime="20241106 11:34:30.205" endtime="20241106 11:34:39.237"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.238" endtime="20241106 11:34:39.238"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>boot1</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.238" endtime="20241106 11:34:39.238"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.238" endtime="20241106 11:34:39.238"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.238" endtime="20241106 11:34:39.239"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.239" endtime="20241106 11:34:39.239"/>
</kw>
<kw name="Camera 0" library="WebcamSnap">
<var>${screenshot_path}</var>
<arg>text</arg>
<doc>This method captures the Image from an external web camera and returns the path of the saved screenshot Image.
:param filename: The filename to save the screenshot image.
:param max_attempts: Maximum number of attempts to capture a non-blank frame.
:return: The path of the saved image.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.239" endtime="20241106 11:34:39.239"/>
</kw>
<kw name="Is Img In Img" library="ImageFinder">
<var>@{Coord_match}</var>
<arg>image=${screenshot_path}</arg>
<arg>template=${template_path}Sanity/warning.png</arg>
<doc>The Method used to check if the Template image present in the Screenshot image
Returns the matched co-ordinates if image is inside template image
params image string: path for the screenshot image
template  string: path where the template image should get saved, if the image already present then give the specified path
threshold  decimal/int: Accuracy for the comparison, depends on the clarity of the screenshot Image captured
show  boolean: set it to True if the cropped image has to be shown in the execution
mark  boolean: if required set it to True , marks the identified Image in the screenshot Image
use_crop boolean: Asks for cropping</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.239" endtime="20241106 11:34:39.239"/>
</kw>
<kw name="Coordinates Json" library="ImageFinder">
<var>@{Coord_json}</var>
<arg>${template_path}Sanity/images_coord.json</arg>
<doc>returns the list of co-ordinates from the json file that is saved while cropping
params path string: path of the json file</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.239" endtime="20241106 11:34:39.239"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${Coord_json_lt}</var>
<arg>@{Coord_json}</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.239" endtime="20241106 11:34:39.239"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${Coord_match_lt}</var>
<arg>@{Coord_match}</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.240" endtime="20241106 11:34:39.240"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${Coord_match_lt}' == 'None' or '${Coord_json_lt}' == 'None' or len(${Coord_match_lt}) == 0 or len(${Coord_json_lt}) == 0</arg>
<arg>Fail</arg>
<arg>Error: Image is not captured or your cropped image is not match with your screenshot image</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.240" endtime="20241106 11:34:39.240"/>
</kw>
<kw name="Compare Coords" library="ImageFinder">
<var>${res_match}</var>
<arg>${Coord_json_lt}</arg>
<arg>${Coord_match_lt}</arg>
<status status="NOT RUN" starttime="20241106 11:34:39.240" endtime="20241106 11:34:39.240"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${res_match}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.240" endtime="20241106 11:34:39.240"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>"checking the condition"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.240" endtime="20241106 11:34:39.240"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>"continue</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.241" endtime="20241106 11:34:39.241"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.241" endtime="20241106 11:34:39.241"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>"ok"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.241" endtime="20241106 11:34:39.241"/>
</kw>
<kw name="Camera 0" library="WebcamSnap">
<var>${screenshot_path}</var>
<arg>text1</arg>
<doc>This method captures the Image from an external web camera and returns the path of the saved screenshot Image.
:param filename: The filename to save the screenshot image.
:param max_attempts: Maximum number of attempts to capture a non-blank frame.
:return: The path of the saved image.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.241" endtime="20241106 11:34:39.241"/>
</kw>
<kw name="Is Img In Img" library="ImageFinder">
<var>@{Coord_match}</var>
<arg>image=${screenshot_path}</arg>
<arg>template=${template_path}Sanity/warning1.png</arg>
<doc>The Method used to check if the Template image present in the Screenshot image
Returns the matched co-ordinates if image is inside template image
params image string: path for the screenshot image
template  string: path where the template image should get saved, if the image already present then give the specified path
threshold  decimal/int: Accuracy for the comparison, depends on the clarity of the screenshot Image captured
show  boolean: set it to True if the cropped image has to be shown in the execution
mark  boolean: if required set it to True , marks the identified Image in the screenshot Image
use_crop boolean: Asks for cropping</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.241" endtime="20241106 11:34:39.241"/>
</kw>
<kw name="Coordinates Json" library="ImageFinder">
<var>@{Coord_json}</var>
<arg>${template_path}Sanity/images_coord.json</arg>
<doc>returns the list of co-ordinates from the json file that is saved while cropping
params path string: path of the json file</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.241" endtime="20241106 11:34:39.242"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${Coord_json_lt}</var>
<arg>@{Coord_json}</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.242" endtime="20241106 11:34:39.242"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${Coord_match_lt}</var>
<arg>@{Coord_match}</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.242" endtime="20241106 11:34:39.242"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${Coord_match_lt}' == 'None' or '${Coord_json_lt}' == 'None' or len(${Coord_match_lt}) == 0 or len(${Coord_json_lt}) == 0</arg>
<arg>Fail</arg>
<arg>Error: Image is not captured or your cropped image is not match with your screenshot image</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.242" endtime="20241106 11:34:39.242"/>
</kw>
<kw name="Compare Coords" library="ImageFinder">
<var>${res_match}</var>
<arg>${Coord_json_lt}</arg>
<arg>${Coord_match_lt}</arg>
<status status="NOT RUN" starttime="20241106 11:34:39.242" endtime="20241106 11:34:39.242"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${res_match}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.242" endtime="20241106 11:34:39.242"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>"checking the condition"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.243" endtime="20241106 11:34:39.243"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>"continue</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.243" endtime="20241106 11:34:39.243"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.243" endtime="20241106 11:34:39.243"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>"ok"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.243" endtime="20241106 11:34:39.243"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.243" endtime="20241106 11:34:39.243"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.243" endtime="20241106 11:34:39.243"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>boot1</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.243" endtime="20241106 11:34:39.244"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.244" endtime="20241106 11:34:39.244"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.244" endtime="20241106 11:34:39.244"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.244" endtime="20241106 11:34:39.244"/>
</kw>
<doc>verify the cluster screen after turning on</doc>
<tag>Manual</tag>
<tag>sanity</tag>
<status status="FAIL" starttime="20241106 11:34:30.204" endtime="20241106 11:34:39.244">'False' should be true.</status>
</test>
<test id="s1-s1-s1-t7" name="TCTOIC-3032 :Verification of Grill Shutter Malfunctioning Warning" line="187">
<kw name="Relayon" library="Common_proj_keywords">
<arg>boot2</arg>
<doc>This is a keyword for Relay ON.</doc>
<kw name="Relay Connect" library="VAutoKitClass">
<var>${relay}</var>
<arg>${switch}</arg>
<doc>This method is used to connect relay
param relay: Relay name from Robot script provided by user for to connect relay</doc>
<msg timestamp="20241106 11:34:39.905" level="INFO">[0;32m06-11-2024 11:34:39:245530	class=VAutoKitClass.py	function=relay_connect	line: 140	INFO	idx relay value- 3
[0m
[0;31m06-11-2024 11:34:39:899836	class=VAutoKitClass.py	function=relay_connect	line: 149	ERROR	Exception on connect relayboot2-Execution terminated by signal
[0m
Error info: (&lt;class 'robot.errors.ExecutionFailed'&gt;, 'VAutoKitClass.py', 141)

None</msg>
<msg timestamp="20241106 11:34:39.906" level="INFO">Traceback (most recent call last):
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\VAutoKit\VAutoKitClass.py", line 141, in relay_connect
    time.sleep(5)
  File "C:\Users\lthomman\AppData\Local\Programs\Python\Python310\lib\site-packages\robot\running\signalhandler.py", line 40, in __call__
    self._stop_execution_gracefully()
  File "C:\Users\lthomman\AppData\Local\Programs\Python\Python310\lib\site-packages\robot\running\signalhandler.py", line 43, in _stop_execution_gracefully
    raise ExecutionFailed('Execution terminated by signal', exit=True)
robot.errors.ExecutionFailed: Execution terminated by signal</msg>
<msg timestamp="20241106 11:34:39.906" level="INFO">${relay} = False</msg>
<status status="PASS" starttime="20241106 11:34:39.245" endtime="20241106 11:34:39.906"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="FAIL" starttime="20241106 11:34:39.906" endtime="20241106 11:34:39.906"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${relay}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.906" endtime="20241106 11:34:39.906"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${relay}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.907" endtime="20241106 11:34:39.907"/>
</kw>
<status status="FAIL" starttime="20241106 11:34:39.245" endtime="20241106 11:34:39.907"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.907" endtime="20241106 11:34:39.907"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>boot1</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.907" endtime="20241106 11:34:39.907"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.907" endtime="20241106 11:34:39.908"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.908" endtime="20241106 11:34:39.908"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.908" endtime="20241106 11:34:39.908"/>
</kw>
<kw name="send can signal periodically">
<var>${task}</var>
<arg>Test1</arg>
<status status="NOT RUN" starttime="20241106 11:34:39.914" endtime="20241106 11:34:39.914"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.914" endtime="20241106 11:34:39.914"/>
</kw>
<kw name="Camera 0" library="WebcamSnap">
<var>${screenshot_path}</var>
<arg>warn1</arg>
<doc>This method captures the Image from an external web camera and returns the path of the saved screenshot Image.
:param filename: The filename to save the screenshot image.
:param max_attempts: Maximum number of attempts to capture a non-blank frame.
:return: The path of the saved image.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.914" endtime="20241106 11:34:39.914"/>
</kw>
<kw name="Is Img In Img" library="ImageFinder">
<var>@{Coord_match}</var>
<arg>image=${screenshot_path}</arg>
<arg>template=${template_path}can_warning1/can_warning1.png</arg>
<doc>The Method used to check if the Template image present in the Screenshot image
Returns the matched co-ordinates if image is inside template image
params image string: path for the screenshot image
template  string: path where the template image should get saved, if the image already present then give the specified path
threshold  decimal/int: Accuracy for the comparison, depends on the clarity of the screenshot Image captured
show  boolean: set it to True if the cropped image has to be shown in the execution
mark  boolean: if required set it to True , marks the identified Image in the screenshot Image
use_crop boolean: Asks for cropping</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.914" endtime="20241106 11:34:39.914"/>
</kw>
<kw name="Coordinates Json" library="ImageFinder">
<var>@{Coord_json}</var>
<arg>${template_path}can_warning1/images_coord.json</arg>
<doc>returns the list of co-ordinates from the json file that is saved while cropping
params path string: path of the json file</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.914" endtime="20241106 11:34:39.914"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${Coord_json_lt}</var>
<arg>@{Coord_json}</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.914" endtime="20241106 11:34:39.915"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${Coord_match_lt}</var>
<arg>@{Coord_match}</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.915" endtime="20241106 11:34:39.915"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${Coord_match_lt}' == 'None' or '${Coord_json_lt}' == 'None' or len(${Coord_match_lt}) == 0 or len(${Coord_json_lt}) == 0</arg>
<arg>Fail</arg>
<arg>Error: Image is not captured or your cropped image is not match with your screenshot image</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.915" endtime="20241106 11:34:39.915"/>
</kw>
<kw name="Compare Coords" library="ImageFinder">
<var>${res_match}</var>
<arg>${Coord_json_lt}</arg>
<arg>${Coord_match_lt}</arg>
<status status="NOT RUN" starttime="20241106 11:34:39.915" endtime="20241106 11:34:39.915"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${res_match}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.915" endtime="20241106 11:34:39.915"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>"checking the condition"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.915" endtime="20241106 11:34:39.915"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>"continue</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.916" endtime="20241106 11:34:39.916"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>30ms</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.916" endtime="20241106 11:34:39.916"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>"ok"</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.916" endtime="20241106 11:34:39.916"/>
</kw>
<kw name="stop can periodically signal">
<arg>${task}</arg>
<status status="NOT RUN" starttime="20241106 11:34:39.922" endtime="20241106 11:34:39.922"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.922" endtime="20241106 11:34:39.922"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.922" endtime="20241106 11:34:39.922"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.923" endtime="20241106 11:34:39.923"/>
</kw>
<kw name="Relayoff" library="Common_proj_keywords">
<arg>boot1</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.923" endtime="20241106 11:34:39.923"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.923" endtime="20241106 11:34:39.923"/>
</kw>
<kw name="Relayon" library="Common_proj_keywords">
<arg>bat</arg>
<doc>This is a keyword for Relay ON.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.923" endtime="20241106 11:34:39.923"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20241106 11:34:39.923" endtime="20241106 11:34:39.923"/>
</kw>
<doc>Verifying Grill Shutter Malfunctioning Warning</doc>
<tag>Manual</tag>
<tag>sanity</tag>
<status status="FAIL" starttime="20241106 11:34:39.245" endtime="20241106 11:34:39.924">Execution terminated by signal</status>
</test>
<test id="s1-s1-s1-t8" name="TCTOIC-3032 :Verification of vehicle approach notification system warning" line="226">
<doc>Verifying vehicle approach notification system warning</doc>
<tag>Manual</tag>
<tag>robot:exit</tag>
<tag>sanity</tag>
<status status="FAIL" starttime="20241106 11:34:39.924" endtime="20241106 11:34:39.924">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-s1-s1-t9" name="TCTOIC-3032 :Verification of Chassis dynamometer mode warning" line="264">
<doc>Verifying Chassis dynamometer mode warning</doc>
<tag>Manual</tag>
<tag>robot:exit</tag>
<tag>sanity</tag>
<status status="FAIL" starttime="20241106 11:34:39.925" endtime="20241106 11:34:39.925">Test execution stopped due to a fatal error.</status>
</test>
<test id="s1-s1-s1-t10" name="TCTOIC-3032 :Verification of Body System Voice Operation warning" line="303">
<doc>Verifying Body System Voice Operation warning</doc>
<tag>Manual</tag>
<tag>robot:exit</tag>
<tag>sanity</tag>
<status status="FAIL" starttime="20241106 11:34:39.925" endtime="20241106 11:34:39.926">Test execution stopped due to a fatal error.</status>
</test>
<doc>FeatureGroup: Lauterbach
Feature: Automatic launch of Trace32 and Execution of scripts</doc>
<status status="FAIL" starttime="20241106 11:33:07.149" endtime="20241106 11:34:39.926"/>
</suite>
<status status="FAIL" starttime="20241106 11:33:07.147" endtime="20241106 11:34:39.928"/>
</suite>
<kw name="Establish Test Postconditions" type="TEARDOWN">
<kw name="Create Xml File" library="UserXmlReporting">
<msg timestamp="20241106 11:34:39.942" level="INFO">[0;31m06-11-2024 11:34:39:928743	class=CommonKeywordsClass.py	function=get_report_path	line: 136	ERROR	ROBOT_REPORT_PATH is not set as environment variable, EXCEPTION: 'ROBOT_REPORT_PATH'
[0m
Error info: (&lt;class 'KeyError'&gt;, 'CommonKeywordsClass.py', 134)

None
[0;31m06-11-2024 11:34:39:938423	class=CommonKeywordsClass.py	function=get_report_path	line: 136	ERROR	ROBOT_REPORT_PATH is not set as environment variable, EXCEPTION: 'ROBOT_REPORT_PATH'
[0m
Error info: (&lt;class 'KeyError'&gt;, 'CommonKeywordsClass.py', 134)

None</msg>
<msg timestamp="20241106 11:34:39.942" level="INFO">Traceback (most recent call last):
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\TestArtifacts\CommonKeywordsClass.py", line 134, in get_report_path
    return os.environ["ROBOT_REPORT_PATH"]
  File "C:\Users\lthomman\AppData\Local\Programs\Python\Python310\lib\os.py", line 680, in __getitem__
    raise KeyError(key) from None
KeyError: 'ROBOT_REPORT_PATH'
Traceback (most recent call last):
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\TestArtifacts\CommonKeywordsClass.py", line 134, in get_report_path
    return os.environ["ROBOT_REPORT_PATH"]
  File "C:\Users\lthomman\AppData\Local\Programs\Python\Python310\lib\os.py", line 680, in __getitem__
    raise KeyError(key) from None
KeyError: 'ROBOT_REPORT_PATH'</msg>
<msg timestamp="20241106 11:34:39.942" level="FAIL">TypeError: expected str, bytes or os.PathLike object, not NoneType</msg>
<status status="FAIL" starttime="20241106 11:34:39.929" endtime="20241106 11:34:39.943"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<errors>
<msg timestamp="20241106 11:33:06.500" level="WARN">uptime library not available, timestamps are relative to boot time and not to Epoch UTC</msg>
<msg timestamp="20241106 11:33:06.500" level="WARN">uptime library not available, timestamps are relative to boot time and not to Epoch UTC</msg>
<msg timestamp="20241106 11:33:07.133" level="ERROR">	class=CommonKeywordsClass.py 	function=get_report_path 	line: 136	ROBOT_REPORT_PATH is not set as environment variable, EXCEPTION: 'ROBOT_REPORT_PATH'</msg>
<msg timestamp="20241106 11:33:07.134" level="ERROR">Error in file 'C:\TOYOTA_DAILY_SANITY\CRE\SWE5_SWIntegrationTest\ProjectTests' on line 3: Initializing library 'CanClass' with arguments [ single ] failed: TypeError: expected str, bytes or os.PathLike object, not NoneType
Traceback (most recent call last):
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\CanClass.py", line 25, in __init__
    self.__initialize_can(channel_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\CanClass.py", line 33, in __initialize_can
    self.can_instance = VectorCANClass(channel_name=channel_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\VectorCANClass.py", line 61, in __init__
    self.file_name_ch1 = self.__can_trace_file_name('single')
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\VectorCANClass.py", line 107, in __can_trace_file_name
    file_name = self.config_manager.get_can_trace_file_path(file_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\ConfigurationManager.py", line 101, in get_can_trace_file_path
    return os.path.join(self.common_keyword.get_can_trace_dir(), file_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\TestArtifacts\CommonKeywordsClass.py", line 346, in get_can_trace_dir
    can_trace = os.path.join(self.get_report_path(), "CAN_TRACE")
  File "C:\Users\lthomman\AppData\Local\Programs\Python\Python310\lib\ntpath.py", line 104, in join
    path = os.fspath(path)
TypeError: expected str, bytes or os.PathLike object, not NoneType</msg>
<msg timestamp="20241106 11:33:07.356" level="ERROR">	class=CommonKeywordsClass.py 	function=get_report_path 	line: 136	ROBOT_REPORT_PATH is not set as environment variable, EXCEPTION: 'ROBOT_REPORT_PATH'</msg>
<msg timestamp="20241106 11:33:07.358" level="ERROR">	class=ConfigurationManager.py 	function=get_vautocan_trace_file_path 	line: 72	'canTraceFileName' Key not present in can_config_file.json</msg>
<msg timestamp="20241106 11:33:07.360" level="ERROR">	class=VAutoKitClass.py 	function=__vautocan_trace_file_name 	line: 257	 EXCEPTION Occurred: 'NoneType' object has no attribute 'endswith'</msg>
<msg timestamp="20241106 11:33:12.468" level="ERROR">	class=CommonKeywordsClass.py 	function=get_report_path 	line: 136	ROBOT_REPORT_PATH is not set as environment variable, EXCEPTION: 'ROBOT_REPORT_PATH'</msg>
<msg timestamp="20241106 11:33:12.468" level="ERROR">Error in file 'C:\TOYOTA_DAILY_SANITY\CRE\Libraries\ProjectKeywords\RobotKeyWords\Common_proj_keywords.robot' on line 3: Initializing library 'CanClass' with arguments [ single ] failed: TypeError: expected str, bytes or os.PathLike object, not NoneType
Traceback (most recent call last):
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\CanClass.py", line 25, in __init__
    self.__initialize_can(channel_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\CanClass.py", line 33, in __initialize_can
    self.can_instance = VectorCANClass(channel_name=channel_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\VectorCANClass.py", line 61, in __init__
    self.file_name_ch1 = self.__can_trace_file_name('single')
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\VectorCANClass.py", line 107, in __can_trace_file_name
    file_name = self.config_manager.get_can_trace_file_path(file_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\ConfigurationManager.py", line 101, in get_can_trace_file_path
    return os.path.join(self.common_keyword.get_can_trace_dir(), file_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\TestArtifacts\CommonKeywordsClass.py", line 346, in get_can_trace_dir
    can_trace = os.path.join(self.get_report_path(), "CAN_TRACE")
  File "C:\Users\lthomman\AppData\Local\Programs\Python\Python310\lib\ntpath.py", line 104, in join
    path = os.fspath(path)
TypeError: expected str, bytes or os.PathLike object, not NoneType</msg>
<msg timestamp="20241106 11:33:13.048" level="ERROR">	class=UnifiedDiagnosticServices.py 	function=__create_can_bus_instance 	line: 213	Error to create the CAN bus Instance, EXCEPTION: 'UnifiedDiagnosticServices' object has no attribute 'channel'</msg>
<msg timestamp="20241106 11:33:13.054" level="ERROR">	class=UnifiedDiagnosticServices.py 	function=__create_isotp_protocol_instance 	line: 242	Error to create network layer addressing scheme, EXCEPTION: bus must be a python-can BusABC object</msg>
<msg timestamp="20241106 11:33:13.056" level="ERROR">	class=UnifiedDiagnosticServices.py 	function=__create_connection_application_and_transport_layer 	line: 255	Error to create connection of application and transport layer, EXCEPTION: isotp_layer must be a valid isotp.TransportLayer </msg>
<msg timestamp="20241106 11:33:13.193" level="ERROR">Error in file 'C:\TOYOTA_DAILY_SANITY\CRE\Libraries\ProjectKeywords\RobotKeyWords\Common_proj_keywords.robot' on line 24: Initializing library 'RobustClass' with arguments [ single ] failed: TypeError: expected str, bytes or os.PathLike object, not NoneType
Traceback (most recent call last):
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\RobustDI\RobustClass.py", line 36, in __init__
    self.robust_can = CanClass.CanClass(channel_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\CanClass.py", line 25, in __init__
    self.__initialize_can(channel_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\CanClass.py", line 33, in __initialize_can
    self.can_instance = VectorCANClass(channel_name=channel_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\VectorCANClass.py", line 61, in __init__
    self.file_name_ch1 = self.__can_trace_file_name('single')
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\VectorCANClass.py", line 107, in __can_trace_file_name
    file_name = self.config_manager.get_can_trace_file_path(file_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\ControllerAreaNetwork\ConfigurationManager.py", line 101, in get_can_trace_file_path
    return os.path.join(self.common_keyword.get_can_trace_dir(), file_name)
  File "C:\TOYOTA_DAILY_SANITY\Robo_FIT\GenericLibraries\GenericOpLibs\TestArtifacts\CommonKeywordsClass.py", line 346, in get_can_trace_dir
    can_trace = os.path.join(self.get_report_path(), "CAN_TRACE")
  File "C:\Users\lthomman\AppData\Local\Programs\Python\Python310\lib\ntpath.py", line 104, in join
    path = os.fspath(path)
TypeError: expected str, bytes or os.PathLike object, not NoneType</msg>
<msg timestamp="20241106 11:34:40.696" level="ERROR">Execution stopped by user.</msg>
</errors>
</robot>
